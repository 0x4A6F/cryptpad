function mxRadialTreeLayout(a){mxCompactTreeLayout.call(this,a,false)}mxUtils.extend(mxRadialTreeLayout,mxCompactTreeLayout);mxRadialTreeLayout.prototype.angleOffset=0.5;mxRadialTreeLayout.prototype.rootx=0;mxRadialTreeLayout.prototype.rooty=0;mxRadialTreeLayout.prototype.levelDistance=120;mxRadialTreeLayout.prototype.nodeDistance=10;mxRadialTreeLayout.prototype.autoRadius=false;mxRadialTreeLayout.prototype.sortEdges=false;mxRadialTreeLayout.prototype.rowMinX=[];mxRadialTreeLayout.prototype.rowMaxX=[];mxRadialTreeLayout.prototype.rowMinCenX=[];mxRadialTreeLayout.prototype.rowMaxCenX=[];mxRadialTreeLayout.prototype.rowRadi=[];mxRadialTreeLayout.prototype.row=[];mxRadialTreeLayout.prototype.isVertexIgnored=function(a){return mxGraphLayout.prototype.isVertexIgnored.apply(this,arguments)||this.graph.getConnections(a).length==0};mxRadialTreeLayout.prototype.execute=function(l,s){this.parent=l;this.useBoundingBox=false;this.edgeRouting=false;mxCompactTreeLayout.prototype.execute.apply(this,arguments);var g=null;var d=this.getVertexBounds(this.root);this.centerX=d.x+d.width/2;this.centerY=d.y+d.height/2;for(var v in this.visited){var p=this.getVertexBounds(this.visited[v]);g=(g!=null)?g:p.clone();g.add(p)}this.calcRowDims([this.node],0);var x=0;var q=0;for(var u=0;u<this.row.length;u++){var o=(this.centerX-this.rowMinX[u]-this.nodeDistance)/this.rowRadi[u];var A=(this.rowMaxX[u]-this.centerX-this.nodeDistance)/this.rowRadi[u];x=Math.max(x,o);q=Math.max(q,A)}for(var u=0;u<this.row.length;u++){var z=this.centerX-this.nodeDistance-x*this.rowRadi[u];var a=this.centerX+this.nodeDistance+q*this.rowRadi[u];var b=a-z;for(var t=0;t<this.row[u].length;t++){var f=this.row[u];var r=f[t];var p=this.getVertexBounds(r.cell);var m=(p.x+p.width/2-z)/(b);var h=2*Math.PI*m;r.theta=h}}for(var u=this.row.length-2;u>=0;u--){var f=this.row[u];for(var t=0;t<f.length;t++){var r=f[t];var e=r.child;var k=0;var y=0;while(e!=null){y+=e.theta;k++;e=e.next}if(k>0){var c=y/k;if(c>r.theta&&t<f.length-1){var n=f[t+1].theta;r.theta=Math.min(c,n-Math.PI/10)}else{if(c<r.theta&&t>0){var w=f[t-1].theta;r.theta=Math.max(c,w+Math.PI/10)}}}}}for(var u=0;u<this.row.length;u++){for(var t=0;t<this.row[u].length;t++){var f=this.row[u];var r=f[t];var p=this.getVertexBounds(r.cell);this.setVertexLocation(r.cell,this.centerX-p.width/2+this.rowRadi[u]*Math.cos(r.theta),this.centerY-p.height/2+this.rowRadi[u]*Math.sin(r.theta))}}};mxRadialTreeLayout.prototype.calcRowDims=function(e,d){if(e==null||e.length==0){return}this.rowMinX[d]=this.centerX;this.rowMaxX[d]=this.centerX;this.rowMinCenX[d]=this.centerX;this.rowMaxCenX[d]=this.centerX;this.row[d]=[];var b=false;for(var c=0;c<e.length;c++){var f=e[c]!=null?e[c].child:null;while(f!=null){var a=f.cell;vertexBounds=this.getVertexBounds(a);this.rowMinX[d]=Math.min(vertexBounds.x,this.rowMinX[d]);this.rowMaxX[d]=Math.max(vertexBounds.x+vertexBounds.width,this.rowMaxX[d]);this.rowMinCenX[d]=Math.min(vertexBounds.x+vertexBounds.width/2,this.rowMinCenX[d]);this.rowMaxCenX[d]=Math.max(vertexBounds.x+vertexBounds.width/2,this.rowMaxCenX[d]);this.rowRadi[d]=vertexBounds.y-this.getVertexBounds(this.root).y;if(f.child!=null){b=true}this.row[d].push(f);f=f.next}}if(b){this.calcRowDims(this.row[d],d+1)}};